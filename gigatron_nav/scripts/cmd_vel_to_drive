#! /usr/bin/env python

'''
  Software License Agreement (BSD License)

  Copyright (c) 2017, Cult Classic Racing.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:

  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above
     copyright notice, this list of conditions and the following
     disclaimer in the documentation and/or other materials provided
     with the distribution.
  3. Neither the name of the copyright holder nor the names of its 
     contributors may be used to endorse or promote products derived
     from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.
  
'''

# cmd_vel_to_drive
# script for converting geometry_msgs/Twist to gigatron/Drive messages
# 
# @author  Syler Wagner  <syler@mit.edu>
# @date    2016-09-11    syler   creation

# Based on cmd_vel_to_ackermann_drive.py from teb_local_planner_tutorials 
# by christoph.roesmann@tu-dortmund.de
# see https://github.com/rst-tu-dortmund/teb_local_planner_tutorials/

import rospy, math
from geometry_msgs.msg import Twist
from gigatron.msg import Drive

def convert_trans_rot_vel_to_steering_angle(v, omega, wheelbase_length):
  if omega == 0 or v == 0:
    return 0

  radius = v / omega
  return math.atan(wheelbase_length / radius)


def split_throttle(v, omega, wheelbase_width):
  v_left = v - (omega / wheelbase_width)   # left wheel velocity
  v_right = v + (omega / wheelbase_width)   # right wheel velocity
  return v_left, v_right

def cmd_callback(data):
  global wheelbase_length
  global wheelbase_width
  global drive_topic
  global frame_id
  global pub
  
  v = data.linear.x
  omega = data.angular.z
  steering = convert_trans_rot_vel_to_steering_angle(v, omega, wheelbase_length)
  v_left, v_right = split_throttle(v, omega, wheelbase_width)

  msg = Drive()
  msg.angle = steering
  msg.vel_left = v_left
  msg.vel_right = v_right

  pub.publish(msg)

if __name__ == '__main__': 
  try:
    
    rospy.init_node('cmd_vel_to_drive')
        
    twist_cmd_topic = rospy.get_param('twist_cmd_topic', '/cmd_vel') 
    drive_topic = rospy.get_param('~drive_topic', '/command/drive')
    wheelbase_length = rospy.get_param('car/wheelbase_length', 1.0)
    wheelbase_width = rospy.get_param('car/wheelbase_length', 1.0)
    frame_id = rospy.get_param('~frame_id', 'odom')
    
    rospy.Subscriber(twist_cmd_topic, Twist, cmd_callback, queue_size=1)
    pub = rospy.Publisher(drive_topic, Drive, queue_size=1)
    
    rospy.loginfo("Node 'cmd_vel_to_drive' started.\nListening to %s, publishing to %s. Frame id: %s, wheelbase length: %f", "/cmd_vel", drive_topic, frame_id, wheelbase_length)
    
    rospy.spin()
    
  except rospy.ROSInterruptException:
    pass
