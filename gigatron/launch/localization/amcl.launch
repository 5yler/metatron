<?xml version="1.0"?>
<!-- amcl.launch
     AMCL localization launch file

     @author  Chris Desnoyers   <cjdesno@mit.edu>
     @author  Syler Wagner      <syler@mit.edu>
     
     http://wiki.ros.org/amcl
-->
<launch>

  <arg name="map_server" doc="launch map_server or no?" />

  <arg name="using_bag" doc="true if running gmapping on rosbagged data" />
  <param name="use_sim_time" value="$(arg using_bag)" />

  <arg name="laser_min_range" default="0.2"/>
  <arg name="laser_max_usable_range" default="4.9" />

  <!-- initial pose and covariance used to initialize filter with Gaussian distribution -->
  <arg name="x" default="0" doc="initial x mean estimate [m]" />
  <arg name="y" default="0" doc="initial y mean estimate [m]" />
  <arg name="yaw" default="0" doc="initial yaw mean estimate [radians]" />
  <arg name="cov_xx" default="1" doc="initial pose covariance (x*x) estimate [m]" />
  <arg name="cov_yy" default="1" doc="Initial pose covariance (y*y) estimate [m]" />
  <arg name="cov_yaw" default="1" doc="Initial pose covariance (yaw*yaw) estimate [radians]" />

  <!-- if map_server arg is set, launch the map server -->
  <group if="$(arg map_server)">
    <arg name="map" default="canny_hallway" /> <!-- map file name in gigatron/maps, without the .yaml extension  -->
    <!-- run map server with our map -->
    <include file="$(find gigatron)/launch/map_server.launch" >
      <arg name="map" value="$(arg map)" />
    </include>
  </group>

  <!-- amcl localization node -->

  <node pkg="amcl" type="amcl" name="amcl" output="screen">

    <!-- initial pose and covariance estimate -->
    <param name="initial_pose_x" value="$(arg x)" /> <!-- [m] -->
    <param name="initial_pose_y" value="$(arg y)" /> <!-- [m] -->
    <param name="initial_pose_a" value="$(arg yaw)" /> <!-- [radians] -->
    <param name="initial_cov_xx" value="$(arg cov_xx)" /> <!-- [m] -->
    <!-- Initial pose covariance (x*x), used to initialize filter with Gaussian distribution. default: 0.5*0.5-->
    <param name="initial_cov_yy" value="$(arg cov_xx)" />  <!-- [m] -->
    <!-- Initial pose covariance (y*y), used to initialize filter with Gaussian distribution.default: 0.5*0.5 -->
    <param name="initial_cov_aa" value="$(arg cov_yaw)" />
    <!-- <param name="initial_cov_aa" value="(π/12)*(π/12) radian)"> -->  <!-- [radians] -->
    <!-- Initial pose covariance (yaw*yaw), used to initialize filter with Gaussian distribution. default: (π/12)*(π/12) radian -->

    <!-- overall filter parameters -->

    <param name="use_map_topic" value="true" />
    <param name="min_particles" value="500" />
    <param name="max_particles" value="5000" />
    <param name="transform_tolerance" value="0.2" /> 
    <!-- Time with which to post-date the transform that is published, to indicate that this transform is valid into the future. -->
    <param name="gui_publish_rate" value="10.0" /> 
    <!-- Maximum rate (Hz) at which scans and paths are published for visualization, -1.0 to disable. -->
    <param name="update_min_d" value="0.2" /> 
    <!-- Translational movement required before performing a filter update. -->
    <param name="update_min_a" value="0.5" /> 
    <!-- Rotational movement required before performing a filter update. -->
    <param name="resample_interval" value="1" />
    <!-- Number of filter updates required before resampling. -->
    <param name="recovery_alpha_slow" value="0.0" /> 
    <!-- Exponential decay rate for the slow average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.001. -->
    <param name="recovery_alpha_fast" value="0.0" /> 
    <!-- Exponential decay rate for the fast average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.1. -->
    <param name="kld_err" value="0.05" /> 
    <!-- Maximum error between the true distribution and the estimated distribution. -->
    <param name="kld_z" value="0.99" />

    <!-- odometry model parameters -->

    <param name="odom_frame_id" value="odom" />
    <param name="odom_model_type" value="diff" /> 
    <!-- Which model to use, either "diff", "omni", "diff-corrected" or "omni-corrected". If ~odom_model_type is "diff" then we use the sample_motion_model_odometry algorithm from Probabilistic Robotics, p136; this model uses the noise parameters odom_alpha_1 through odom_alpha4, as defined in the book. -->
    <param name="odom_alpha1" value="0.2" /> 
    <!-- Specifies the expected noise in odometry's rotation estimate from the rotational component of the robot's motion. -->
    <param name="odom_alpha2" value="0.2" /> 
    <!-- Specifies the expected noise in odometry's rotation estimate from translational component of the robot's motion. -->
    <!-- translation std dev, m -->
    <param name="odom_alpha3" value="0.8" /> 
    <!-- Specifies the expected noise in odometry's translation estimate from the translational component of the robot's motion. -->
    <param name="odom_alpha4" value="0.2" /> 
    <!-- Specifies the expected noise in odometry's translation estimate from the rotational component of the robot's motion. -->
    <!-- <param name="odom_alpha5" value="0.1" /> --> 
    <!-- Translation-related noise parameter (only used if model is "omni"). -->

    <!-- laser parameters -->

    <param name="laser_min_range" value="$(arg laser_min_range)" />
    <!-- Minimum scan range to be considered; -1.0 will cause the laser's reported minimum range to be used. -->
    <param name="laser_max_range" value="$(arg laser_max_usable_range)" />
    <!-- Maximum scan range to be considered; -1.0 will cause the laser's reported maximum range to be used. -->
    <param name="laser_max_beams" value="300" /> 
    <!-- How many evenly-spaced beams in each scan to be used when updating the filter. -->
    <param name="laser_model_type" value="likelihood_field" />
    <param name="laser_z_hit" value="0.5" />
    <param name="laser_z_short" value="0.05" />
    <param name="laser_z_max" value="0.05" />
    <param name="laser_z_rand" value="0.5" />
    <param name="laser_sigma_hit" value="0.2" />
    <param name="laser_lambda_short" value="0.1" />
    <param name="laser_lambda_short" value="0.1" />
    <param name="laser_likelihood_max_dist" value="2.0" />
    <!-- Maximum distance to do obstacle inflation on map, for use in likelihood_field model. -->
  </node>
</launch>
