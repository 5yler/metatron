#!/usr/bin/env python

'''
  Software License Agreement (BSD License)

  Copyright (c) 2017, Cult Classic Racing.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:

  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above
     copyright notice, this list of conditions and the following
     disclaimer in the documentation and/or other materials provided
     with the distribution.
  3. Neither the name of the copyright holder nor the names of its 
     contributors may be used to endorse or promote products derived
     from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.

'''

##
# stop
# Python script for reactive stopping based on laser scan
# 
# @author  Syler Wagner  <syler@mit.edu>
#
# @date    2016-03-05    syler   creation
##

from __future__ import division

import rospy
from std_msgs.msg import Bool   # for switching Jetson/RC mode
from sensor_msgs.msg import LaserScan   
import math

# RPLIDAR data constant in all LaserScan messages
angle_min = 3.14159274101
angle_max = -3.12413907051
angle_increment = -0.0174532923847
range_min = 0.15000000596
range_max = 6.0

inf = float('nan')

# helper functions
def point_too_close(r):
    # this verifies a point in the filtered scan
    if math.isnan(r):
        return 0
    elif r < 0:
        return 0
    elif r < range_min or r > range_max: 
        return 0
    else:
        return 1

# laser scan callback method
def callback(scan):
    ranges = scan.ranges
    intensities = scan.intensities

    n_too_close = 0

    for i in xrange(len(ranges)):
        n_too_close += point_too_close(ranges[i])

    stop = Bool()

    stop_data = 0
    if n_too_close > 1:
        print " [ > ] %d points too close!" % (n_too_close)
        if n_too_close > 5:
            print " [ > ] THIS NEEDS TO STOP."
            stop.data = 1
        
    pub.publish(stop)


if __name__=="__main__":
    
    rospy.init_node('stop')

    scan_topic = rospy.get_param("~scan_topic")
    estop_topic = rospy.get_param("~estop_topic")


    # control publisher
    pub = rospy.Publisher(estop_topic, Bool, queue_size=1)

    # scan subscriber
    rospy.Subscriber(scan_topic, LaserScan, callback)

    rospy.spin()


