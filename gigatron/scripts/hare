#!/usr/bin/env python

##
# hare
# Python script for remote controlling Gigatron 
# via keyboard input 
# 
# @author  Syler Wagner  <syler@mit.edu>
#
# @date    2015-09-16    syler   creation
##

import rospy
from gigatron.msg import Drive   # for sending controls
import sys, select, termios, tty, math

help_msg = """
Control Your Car!
---------------------------
Moving around:
   u    i    o
   j    k    l

Set self.speed in m/s
z : 1
x : 2
c : 3
q : 4
w : 5
e : 6
space key, k : force stop

CTRL-C : quit
"""

moveBindings = {
        'i':(1.0, 0.0),
        'o':(0.8, -0.5),
        'u':(0.8, 0.5),
        'j':(0.6, 1.0),
        'l':(0.6, -1.0),
#        ',':(-1,0),
#        '.':(-1,1),
#        'm':(-1,-1),
           }

speedBindings={
        'q':(3.0, 1.0),
        'z':(1.0, 1.0),
        'w':(4.0, 1.0),
        'x':(2.0, 1.0),
        'e':(6.0, 1.0),
        'c':(5.0, 1.0),
          }

class Hare():

    def __init__(self):
        self.settings = termios.tcgetattr(sys.stdin)
          
        rospy.init_node('hare')

        # control publisher
        pub = rospy.Publisher('/command/drive', Drive, queue_size=5)

        self.speed = 1.0
        self.turn = 1.0

        x = 0.0
        th = 0.0
        status = 0
        count = 0
        acc = 0.1
        target_speed = 0.0
        target_turn = 0.0
        control_speed = 0.0
        control_turn = 0.0

        # get some parameters
        self._wheelbase_width = rospy.get_param("car/wheelbase_width")
        self._steering_angle_range = rospy.get_param("car/steering_angle_range")
        self._abs_max_steering_angle = 0.5 * self._steering_angle_range

        try:
            print help_msg
            rospy.sleep(2)
            print self.vel_string()
            while(1):
                key = self.get_key()
                if key in moveBindings.keys():
                    x = moveBindings[key][0]
                    th = moveBindings[key][1] * self._abs_max_steering_angle
                    count = 0
                elif key in speedBindings.keys():
                    self.speed = speedBindings[key][0]
                    self.turn = self.turn * speedBindings[key][1]
                    count = 0
                    print " [ >>] Set self.speed to %2.1f m/s" % (self.speed) 
                    if (status == 14):
                        print msg
                    status = (status + 1) % 15
                elif key == ' ' or key == 'k' :
                    x = 0.0
                    th = 0.0
                    control_speed = 0.0
                    control_turn = 0.0
                    print " [>>>] STOP!"
                elif key == 'h' :
                    print help_msg
                else:
                    count = count + 1
                    if count > 4:
                        x = 0.0
                        th = 0.0
                    if (key == '\x03'):
                        break

                target_speed = self.speed * x
                target_turn = self.turn * th

                control_speed = target_speed

                # if target_turn > control_turn:
                #     control_turn = min( target_turn, control_turn + 0.1 )
                # elif target_turn < control_turn:
                #     control_turn = max( target_turn, control_turn - 0.1 )
                # else:
                control_turn = target_turn

                control = Drive()
                
                v = control_speed
                omega = (v * math.tan(th)) / self._wheelbase_width
                v_left = v - (omega / self._wheelbase_width)   # left wheel velocity
                v_right = v + (omega / self._wheelbase_width)   # right wheel velocity
                
                control.angle = th  # steering angle 
                control.vel_left = max(v_left, 0)  # left wheel velocity
                control.vel_right = max(v_right, 0) # right wheel velocity

                print " [ > ] angle: %4.1f rad  V_l: %4.1f m/s  V_r: %4.1f m/s" % (control.angle, control.vel_left, control.vel_right)
                pub.publish(control)

        finally:
            control = Drive()
            control.angle = 0.0     # steering angle 
            control.vel_left = 0.0     # left wheel velocity
            control.vel_right = 0.0     # right wheel velocity
            pub.publish(control)

        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, self.settings)

    def get_key(self):
        tty.setraw(sys.stdin.fileno())
        rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
        if rlist:
            key = sys.stdin.read(1)
        else:
            key = ''

        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, self.settings)
        return key


    def vel_string(self):
        return "currently:\tself.speed %s\tself.turn %s " % (self.speed, self.turn)


if __name__=="__main__":
    rospy.init_node('hare')
    
    try:
        Hare()
    except rospy.ROSInterruptException:
        print " [!!!] key_pilot: ROSInterruptException!"
        pass
