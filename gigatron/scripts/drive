#!/usr/bin/env python

##
# drive
# Python script for reactive driveing based on laser scan
# 
# @author  Syler Wagner  <syler@mit.edu>
#
# @date 2015-09-21   syler   creation
# @date 2016-09-17   syler   added inverted laser handling
##

from __future__ import division

import rospy
import sys
import numpy as np
import math
from sensor_msgs.msg import LaserScan   # for switching Jetson/RC mode
from gigatron.msg import Drive   # for sending controls

from laser_geometry import LaserProjection # for getting and using PointCloud from LaserScan
from sensor_msgs.msg import PointCloud2 
import sensor_msgs.point_cloud2 as pc2

import tf   # for laser transform

follow_syler = False
avgPts = 2 #Number of scans to average (Set to 1 to keep prior behavior)

fast_dist = 5   #Assumes with 5m of clearance ahead we can go as fast as possible

inf = float('nan')

# wrap angle to interval [-pi, pi]
def wrap_angle(angle):
    while angle > math.pi:
        angle -= 2*math.pi
    while angle < -math.pi:
        angle += 2*math.pi
    # sanity check
    assert angle > -math.pi and angle < math.pi
    return angle

# get sign of a number
def sign(x):
    if x > 0:
        return 1
    elif x < 0:
        return -1
    elif x == 0:
        return 0
    else: # this covers NaN values
        return x

class Points():
    
    def __init__(self, point_list):
        if len(point_list) != 0:
            self.angles = point_list[0]
            self.ranges = point_list[1]
        else:
            self.angles = []
            self.ranges = []
        
    def num_points(self):
        print str(len(self.ranges))+" valid points"
        return len(self.ranges)

    def is_empty(self):
        if len(self.ranges) == 0:
            return True
        else:
            return False

class Driver():

    def __init__(self):

        #integral averaging for reactive control
        self.avgScan = 0
        self.ang = 0

        # control publisher
        self._pub = rospy.Publisher('/command/drive', Drive, queue_size=5)

        scan_topic = rospy.get_param('~scan_topic', 'scan')
        self._got_lidar_parameters = False
        self._lidar_yaw = 0
        self._upside_down_lidar = False

        self._ignore_tf = rospy.get_param("~ignore_tf", False)


        # get some parameters
        self._car_name = rospy.get_param("car/name")
        self._wheelbase_width = rospy.get_param("car/wheelbase_width")
        self._wheelbase_length = rospy.get_param("car/wheelbase_length")
        if rospy.has_param("car/wheel_diameter"):
            self._wheel_radius = rospy.get_param("car/wheel_diameter") / 2.0
        else:
            self._wheel_radius = rospy.get_param("car/wheel_radius")
        self._gear_ratio = rospy.get_param("car/gear_ratio")
        self._steering_angle_range = rospy.get_param("car/steering_angle_range")
        self._max_motor_rpm  = rospy.get_param("car/max_motor_rpm")

        self._rpm_to_vel = (2 * math.pi * self._wheel_radius) / 60.0

        self._abs_max_steering_angle = 0.5 * self._steering_angle_range
        self._v_max = self._max_motor_rpm * self._rpm_to_vel * self._gear_ratio
        """
        if rospy.has_param("~v_max"):
            self._v_max = rospy.get_param("~v_max")
            rospy.logerr("SETTING MAX AUTO VELOCITY TO %4.2f m/s", self._v_max)
        """
        self._v_max = 1.5
        self._v_faster = self._v_max
        self._v_forward = .7 * self._v_max
        self._v_slowest = 0.5 * self._v_max

        rospy.logwarn("Got parameters for car: %s", self._car_name)


        # note: this will be overridden by tf information if available
        if rospy.has_param("~lidar_yaw"):
            self._lidar_yaw = rospy.get_param("~lidar_yaw")

        if rospy.has_param("~upside_down_lidar"):
            self._upside_down_lidar = rospy.get_param("~upside_down_lidar")


        # scan subscriber
        rospy.Subscriber(scan_topic, LaserScan, self.callback)
        rospy.logwarn("Subscribing to scan topic: %s", scan_topic)

        rospy.spin()

    # laser scan callback method
    def callback(self, scan):

        if not self._got_lidar_parameters:
            self.initialize_laser_parameters(scan)

        drive_angle = self.steer(scan, yaw_offset=self._lidar_yaw, yaw_min=-math.pi/2, yaw_max=math.pi/2)
     
        '''
        if self.ahead_clear(scan): #if clear, go fast!
            control.angle = 0.0
            control.vel_left = self._v_max
            control.vel_right = self._v_max
        else: #drive normally
        '''
        v = self.throttle(drive_angle)
        v_left, v_right = self.split_throttle(drive_angle, v)
        drive_angle, v_left, v_right = self.proportional_throttle(drive_angle, scan)
    

        if abs(drive_angle) > self._abs_max_steering_angle:
            drive_angle = drive_angle * (self._abs_max_steering_angle / abs(drive_angle))

        control = Drive()
        self.ang = drive_angle
        # set velocity commands
        control.angle = drive_angle  # driving angle 
        control.vel_left = max(v_left, 0)  # left wheel velocity
        control.vel_right = max(v_right, 0) # right wheel velocity

        rospy.logwarn("angle: %4.1f rad  V_l: %4.1f m/s  V_r: %4.1f m/s", control.angle, control.vel_left, control.vel_right)
        self._pub.publish(control)

    def initialize_laser_parameters(self, scan):

        self._angle_min = scan.angle_min
        self._angle_max = scan.angle_max
        self._angle_increment = scan.angle_increment
        self._range_min = scan.range_min
        self._range_max = scan.range_max


        if not self._ignore_tf:
            listener = tf.TransformListener()
            try: # try to look up transform between base_link and laser frame
                (trans, rot) = listener.lookupTransform('base_link', scan.header.frame_id, rospy.Time(0))
                (roll, pitch, yaw) = tf.transformations.euler_from_quaternion(rot)
                self._lidar_yaw = yaw
            except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException), e:
                rospy.logerr("Could not get transform between base_link and %s!", scan.header.frame_id)
                pass

        rospy.logerr("LIDAR YAW OFFSET IS %4.2f RADIANS", self._lidar_yaw)
        rospy.loginfo("Got LIDAR parameters.")

        self._got_lidar_parameters = True

    # generate an array with the scan angles associated with sequential points in a laser scan
    def generate_scan_angles(self, angle_min, angle_max, angle_increment, yaw_offset=0):
        n_points = int(round((angle_max - angle_min + angle_increment)/angle_increment))
        angles = []
        for i in xrange(n_points):
            angle = wrap_angle(angle_min + i*angle_increment + yaw_offset)
            if not self._upside_down_lidar:
                angles.append(angle)
            else:
                angles.append(-angle)

        return angles

    # helper functions
    def point_ok(self, point):
        angle, r = point[0], point[1]

        if math.isnan(r): # check for inf
            return False
        if r < 0:
            return False
#        elif intensity <= 0.0: # this might not be necessary
#            return False
        elif r < self._range_min or r > self._range_max: 
            return False
        else:
            return True

    # return OK points with yaw in specified range
    def narrow_fov(self, points, yaw_min, yaw_max):
        narrow = [p for p in zip(points.angles, points.ranges) if yaw_min < p[0] < yaw_max and self.point_ok(p)]
        return Points([list(n) for n in zip(*narrow)])

    def polar_integrate(self, narrow):
        integral = 0;
        dirintegral = 0;
        for p in zip(narrow.angles, narrow.ranges):
            yaw = p[0]
            r = p[1]
            # use -= because we want to steer away from points
            dirintegral -= sign(yaw) * (1/math.sqrt(r)) * math.cos(yaw)
            integral += (1/math.sqrt(r)) * math.cos(yaw)
        return dirintegral/integral

    def pow_integrate(self, narrow):
        integral = 0;
        dirintegral = 0;
        kP = 0.01
        pwr = 0.25
        for p in zip(narrow.angles, narrow.ranges):
            yaw = p[0]-self.ang
            r = p[1]
            # use -= because we want to steer away from points
            dirintegral -= sign(yaw) * (1/math.pow(r,pwr)) * math.cos(yaw)
        self.avgScan = (1.0/avgPts)*(dirintegral) + (1-1.0/avgPts)*self.avgScan        
        return kP * self.avgScan #dirintegral/integral


    def steer(self, scan, yaw_offset, yaw_min=-math.pi/2, yaw_max=math.pi/2):
        angles = self.generate_scan_angles(self._angle_min, self._angle_max, self._angle_increment, yaw_offset=self._lidar_yaw)
        scan_points = Points([angles, scan.ranges])
        narrow_points = self.narrow_fov(scan_points, yaw_min, yaw_max)
        if narrow_points.is_empty():
            drive_angle = 0 
        else:
            drive_angle = self.pow_integrate(narrow_points)
        return drive_angle

    # adjust forward velocity to be lower when steering
    def throttle(self, steer_angle):
        v = self._v_forward * (self._abs_max_steering_angle - abs(steer_angle)) / self._abs_max_steering_angle
        v = max(v, self._v_slowest) # so it doesn't stop at the extremes of turning range
        return v

    # get individual drive wheel velocities from center velocity and steering angle
    def split_throttle(self, steer_angle, v):
        # omega = angular velocity
        omega = (v * math.tan(steer_angle)) / self._wheelbase_length

        # v = center velocity
        # omega is the same for the entire car, but the outer wheel will have a higher
        # velocity during the turn because the radius is higher

        # v = r * omega
        # v_left = (r_center - 0.5 * wheelbase_width) * omega
        # r_center = v / omega
        v_left = v - 0.5 * self._wheelbase_width * omega
        v_right = v + 0.5 * self._wheelbase_width * omega
      
        return v_left, v_right

    
    def proportional_throttle(self, steer_angle, scan):
        
        angles = self.generate_scan_angles(self._angle_min, self._angle_max, self._angle_increment, yaw_offset=self._lidar_yaw)
        scan_points = Points([angles, scan.ranges])
        points_ahead = self.narrow_fov(scan_points, -math.pi/8, math.pi/8)
        points_steer_ahead = self.narrow_fov(scan_points, steer_angle-math.pi/8, steer_angle+math.pi/8)

        ranges_ahead = []
        for r in points_ahead.ranges:
            ranges_ahead.append(r)

        ranges_steer_ahead = []
        for r in points_steer_ahead.ranges:
            ranges_steer_ahead.append(r)

        v = self.throttle(steer_angle)
        rospy.logwarn("proportional_throttle v: %4.1f", v)

        if (len(ranges_ahead) > 0):
            min_dist = min(ranges_ahead)
            if (min_dist < 5):
                angle = steer_angle
                # v *= (self._v_faster / self._v_forward) * (min_dist / self._fast_dist)
                v = max(v, self._v_slowest)
                rospy.logerr("[STRAIGHT AHEAD] NOT CLEAR")

            else:
                angle = 0.5*steer_angle
                # v_left = v_right = self.v_max
                rospy.logerr("[STRAIGHT AHEAD] ALMOST CLEAR")
            v_left, v_right = self.split_throttle(angle, v)
        else:
            angle = 0.3*steer_angle
            v_left = v_right = self._v_max
            rospy.logerr("[STRAIGHT AHEAD] CLEAR")

        if (len(ranges_ahead) > 0):
            min_dist = min(ranges_ahead)
            if (min_dist < 5):
                angle = steer_angle
                # v *= (self._v_faster / self._v_forward) * (min_dist / self._fast_dist)
                v = max(v, self._v_slowest)
                rospy.logerr("[STEER] NOT CLEAR")

            else:
                angle = 0.2*steer_angle
                # v_left = v_right = self.v_max
                rospy.logerr("[STEER] ALMOST CLEAR")
            v_left, v_right = self.split_throttle(angle, v)
        else:
            angle = 0
            v_left = v_right = self._v_max
            rospy.logerr("[STEER] CLEAR")
            

        
        return angle, v_left, v_right

    '''
    def ahead_clear(self, scan_unfiltered):
        Projector = LaserProjection()
        cloud = Projector.projectLaser(scan) #gets PointCloud2
        pts = pc2.read_points(cloud,skip_nans=True,field_names=("x","y","z"))
        for p in pts:
            if abs(p[1]) <= self._wheelbase_width / 2 and p[0] > 0: #is the point in the way?
                return False
        return True
    '''

if __name__=="__main__":
    
    rospy.init_node('reactive_drive')

    try:
        Driver()
    except rospy.ROSInterruptException:
        print "broken"
