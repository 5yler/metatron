#!/usr/bin/env python

##
# hare
# Python script for remote controlling Gigatron 
# via keyboard input to the Jetson, and switching
# between radio-controlled RC and Jetson mode.
# 
# @author  Syler Wagner  <syler@mit.edu>
#
# @date    2015-09-16    syler   creation
##

import rospy
from geometry_msgs.msg import Vector3   # for sending controls
from std_msgs.msg import String   # for switching Jetson/RC mode
import sys, select, termios, tty, math

ABS_MAX_STEERING_ANGLE = 25.0 * (math.pi / 180.0)
INCHES_TO_M = 0.0254
wheelbase_width = 23.0 * INCHES_TO_M

msg = """
Control Your Hare!
---------------------------
Moving around:
   u    i    o
   j    k    l

Set speed in m/s
z : 1
x : 2
c : 3
q : 4
w : 5
e : 6
space key, k : force stop

r : switch to RC mode
a : switch to Jetson mode
CTRL-C : quit
"""

moveBindings = {
        'i':(1.0, 0.0),
        'o':(0.8, -0.5),
        'u':(0.8, 0.5),
        'j':(0.6, 1.0),
        'l':(0.6, -1.0),
#        ',':(-1,0),
#        '.':(-1,1),
#        'm':(-1,-1),
           }

speedBindings={
        'q':(3.0, 1.0),
        'z':(1.0, 1.0),
        'w':(4.0, 1.0),
        'x':(2.0, 1.0),
        'e':(6.0, 1.0),
        'c':(5.0, 1.0),
          }

def getKey():
    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

speed = 1.0
turn = 1.0

def vels(speed,turn):
    return "currently:\tspeed %s\tturn %s " % (speed,turn)

if __name__=="__main__":
    settings = termios.tcgetattr(sys.stdin)
    
    rospy.init_node('hare')

    # control publisher
    pub = rospy.Publisher('control', Vector3, queue_size=5)

    # mode switching publisher
    switch_pub = rospy.Publisher('switch', String, queue_size=5)

    x = 0.0
    th = 0.0
    status = 0
    count = 0
    acc = 0.1
    target_speed = 0.0
    target_turn = 0.0
    control_speed = 0.0
    control_turn = 0.0
    try:
        print msg
        print vels(speed,turn)
        while(1):
            key = getKey()
            if key in moveBindings.keys():
                x = moveBindings[key][0]
                th = moveBindings[key][1] * ABS_MAX_STEERING_ANGLE
                count = 0
            elif key in speedBindings.keys():
                speed = speedBindings[key][0]
                turn = turn * speedBindings[key][1]
                count = 0

                if (status == 14):
                    print msg
                status = (status + 1) % 15
            elif key == ' ' or key == 'k' :
                x = 0.0
                th = 0.0
                control_speed = 0.0
                control_turn = 0.0
            elif key == 'r' :
                # switch to RC mode
                mode = String()
                mode.data = "RC"
                switch_pub.publish(mode)
            elif key == 'a' :
                # switch to autonomous mode
                mode = String()
                mode.data = "Autonomous"
                switch_pub.publish(mode)
            else:
                count = count + 1
                if count > 4:
                    x = 0.0
                    th = 0.0
                if (key == '\x03'):
                    break

            target_speed = speed * x
            target_turn = turn * th

            control_speed = target_speed

            # if target_turn > control_turn:
            #     control_turn = min( target_turn, control_turn + 0.1 )
            # elif target_turn < control_turn:
            #     control_turn = max( target_turn, control_turn - 0.1 )
            # else:
            control_turn = target_turn

            control = Vector3()
            
            v = control_speed
            omega = (v * math.tan(th)) / wheelbase_width
            v_left = v - (omega / wheelbase_width)   # left wheel velocity
            v_right = v + (omega / wheelbase_width)   # right wheel velocity
            
            control.x = th  # steering angle 
            control.y = max(v_left, 0)  # left wheel velocity
            control.z = max(v_right, 0) # right wheel velocity

            print " [ > ] angle: %4.1f rad  V_l: %4.1f m/s  V_r: %4.1f m/s" % (control.x, control.y, control.z)
            pub.publish(control)

    except:
        print e

    finally:
        control = Vector3()
        control.x = 0.0     # steering angle 
        control.y = 0.0     # left wheel velocity
        control.z = 0.0     # right wheel velocity
        pub.publish(control)

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)


